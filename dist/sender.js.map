{"version":3,"file":"sender.js","sources":["../src/common/anonymize.js","../src/sender/diff_match_patch.js","../src/sender/computePatch.js","../src/common/hash.js","../src/common/passiveListener.js","../src/common/selector.js","../src/sender/observer/html.js","../src/sender/observer/focus.js","../src/sender/observer/change.js","../src/sender/observer/select.js","../src/sender/observer/scroll.js","../src/sender/observer/mouse.js","../src/sender/observer/resize.js","../src/sender/sender.js"],"sourcesContent":["export default value => (value ? value.replace(/[^\\s]/gm, \"â€¢\") : \"\");\n","/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n//  DIFF FUNCTIONS\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * Attempts to look like a two-element array (which is what this used to be).\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  this[0] = op;\n  this[1] = text;\n};\n\ndiff_match_patch.Diff.prototype.length = 2;\n\n/**\n * Emulate the output of a two-element array.\n * @return {string} Diff operation as a string.\n */\ndiff_match_patch.Diff.prototype.toString = function() {\n  return this[0] + \",\" + this[1];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(\n  text1,\n  text2,\n  opt_checklines,\n  opt_deadline\n) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == \"undefined\") {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error(\"Null input. (diff_main)\");\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == \"undefined\") {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(\n  text1,\n  text2,\n  checklines,\n  deadline\n) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n      new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n      new diff_match_patch.Diff(\n        DIFF_INSERT,\n        longtext.substring(i + shorttext.length)\n      ),\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [\n      new diff_match_patch.Diff(DIFF_DELETE, text1),\n      new diff_match_patch.Diff(DIFF_INSERT, text2),\n    ];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat(\n      [new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n      diffs_b\n    );\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, \"\"));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = \"\";\n  var text_insert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(\n            pointer - count_delete - count_insert,\n            count_delete + count_insert\n          );\n          pointer = pointer - count_delete - count_insert;\n          var subDiff = this.diff_main(\n            text_delete,\n            text_insert,\n            false,\n            deadline\n          );\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = \"\";\n        text_insert = \"\";\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop(); // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = delta % 2 != 0;\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if (new Date().getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length &&\n        y1 < text2_length &&\n        text1.charAt(x1) == text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length &&\n        y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) ==\n          text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [\n    new diff_match_patch.Diff(DIFF_DELETE, text1),\n    new diff_match_patch.Diff(DIFF_INSERT, text2),\n  ];\n};\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(\n  text1,\n  text2,\n  x,\n  y,\n  deadline\n) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = []; // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {}; // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = \"\";\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = \"\";\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (\n        lineHash.hasOwnProperty\n          ? lineHash.hasOwnProperty(line)\n          : lineHash[line] !== undefined\n      ) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return { chars1: chars1, chars2: chars2, lineArray: lineArray };\n};\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join(\"\");\n  }\n};\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (\n    !text1 ||\n    !text2 ||\n    text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)\n  ) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (\n      found == 0 ||\n      text1.substring(text_length - length) == text2.substring(0, length)\n    ) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = \"\";\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(\n        longtext.substring(i),\n        shorttext.substring(j)\n      );\n      var suffixLength = dmp.diff_commonSuffix(\n        longtext.substring(0, i),\n        shorttext.substring(0, j)\n      );\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common =\n          shorttext.substring(j - suffixLength, j) +\n          shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a,\n        best_longtext_b,\n        best_shorttext_a,\n        best_shorttext_b,\n        best_common,\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(\n    longtext,\n    shorttext,\n    Math.ceil(longtext.length / 4)\n  );\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(\n    longtext,\n    shorttext,\n    Math.ceil(longtext.length / 2)\n  );\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (\n        lastEquality &&\n        lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1) &&\n        lastEquality.length <= Math.max(length_insertions2, length_deletions2)\n      ) {\n        // Duplicate record.\n        diffs.splice(\n          equalities[equalitiesLength - 1],\n          0,\n          new diff_match_patch.Diff(DIFF_DELETE, lastEquality)\n        );\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (\n      diffs[pointer - 1][0] == DIFF_DELETE &&\n      diffs[pointer][0] == DIFF_INSERT\n    ) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (\n          overlap_length1 >= deletion.length / 2 ||\n          overlap_length1 >= insertion.length / 2\n        ) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(\n            pointer,\n            0,\n            new diff_match_patch.Diff(\n              DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)\n            )\n          );\n          diffs[pointer - 1][1] = deletion.substring(\n            0,\n            deletion.length - overlap_length1\n          );\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (\n          overlap_length2 >= deletion.length / 2 ||\n          overlap_length2 >= insertion.length / 2\n        ) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(\n            pointer,\n            0,\n            new diff_match_patch.Diff(\n              DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)\n            )\n          );\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(\n            0,\n            insertion.length - overlap_length2\n          );\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 =\n      nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 =\n      nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 =\n      whitespace1 && char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 =\n      whitespace2 && char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 =\n      lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 =\n      lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (\n      diffs[pointer - 1][0] == DIFF_EQUAL &&\n      diffs[pointer + 1][0] == DIFF_EQUAL\n    ) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore =\n        diff_cleanupSemanticScore_(equality1, edit) +\n        diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score =\n          diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      if (\n        diffs[pointer][1].length < this.Diff_EditCost &&\n        (post_ins || post_del)\n      ) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (\n        lastEquality &&\n        ((pre_ins && pre_del && post_ins && post_del) ||\n          (lastEquality.length < this.Diff_EditCost / 2 &&\n            pre_ins + pre_del + post_ins + post_del == 3))\n      ) {\n        // Duplicate record.\n        diffs.splice(\n          equalities[equalitiesLength - 1],\n          0,\n          new diff_match_patch.Diff(DIFF_DELETE, lastEquality)\n        );\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--; // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--; // Throw away the previous equality.\n          pointer =\n            equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, \"\"));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = \"\";\n  var text_insert = \"\";\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (\n                pointer - count_delete - count_insert > 0 &&\n                diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL\n              ) {\n                diffs[\n                  pointer - count_delete - count_insert - 1\n                ][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(\n                  0,\n                  0,\n                  new diff_match_patch.Diff(\n                    DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)\n                  )\n                );\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) +\n                diffs[pointer][1];\n              text_insert = text_insert.substring(\n                0,\n                text_insert.length - commonlength\n              );\n              text_delete = text_delete.substring(\n                0,\n                text_delete.length - commonlength\n              );\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(\n              pointer,\n              0,\n              new diff_match_patch.Diff(DIFF_DELETE, text_delete)\n            );\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(\n              pointer,\n              0,\n              new diff_match_patch.Diff(DIFF_INSERT, text_insert)\n            );\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = \"\";\n        text_insert = \"\";\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (\n      diffs[pointer - 1][0] == DIFF_EQUAL &&\n      diffs[pointer + 1][0] == DIFF_EQUAL\n    ) {\n      // This is a single edit surrounded by equalities.\n      if (\n        diffs[pointer][1].substring(\n          diffs[pointer][1].length - diffs[pointer - 1][1].length\n        ) == diffs[pointer - 1][1]\n      ) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] =\n          diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(\n            0,\n            diffs[pointer][1].length - diffs[pointer - 1][1].length\n          );\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (\n        diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]\n      ) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n};\n\n//  PATCH FUNCTIONS\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error(\"patch not initialized\");\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (\n    text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n    pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin\n  ) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(\n      patch.start2 - padding,\n      patch.start2 + patch.length1 + padding\n    );\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(\n    patch.start2 + patch.length1,\n    patch.start2 + patch.length1 + padding\n  );\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (\n    typeof a == \"string\" &&\n    typeof opt_b == \"string\" &&\n    typeof opt_c == \"undefined\"\n  ) {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */ a;\n    diffs = this.diff_main(text1, /** @type {string} */ opt_b, true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (\n    a &&\n    typeof a == \"object\" &&\n    typeof opt_b == \"undefined\" &&\n    typeof opt_c == \"undefined\"\n  ) {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ a;\n    text1 = this.diff_text1(diffs);\n  } else if (\n    typeof a == \"string\" &&\n    opt_b &&\n    typeof opt_b == \"object\" &&\n    typeof opt_c == \"undefined\"\n  ) {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */ a;\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ opt_b;\n  } else if (\n    typeof a == \"string\" &&\n    typeof opt_b == \"string\" &&\n    opt_c &&\n    typeof opt_c == \"object\"\n  ) {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */ a;\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */ opt_c;\n  } else {\n    throw new Error(\"Unknown call format to patch_make.\");\n  }\n\n  if (diffs.length === 0) {\n    return []; // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0; // Keeping our own length var is faster in JS.\n  var char_count1 = 0; // Number of characters into the text1 string.\n  var char_count2 = 0; // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text =\n          postpatch_text.substring(0, char_count2) +\n          diff_text +\n          postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text =\n          postpatch_text.substring(0, char_count2) +\n          postpatch_text.substring(char_count2 + diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (\n          diff_text.length <= 2 * this.Patch_Margin &&\n          patchDiffLength &&\n          diffs.length != x + 1\n        ) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join(\"\");\n};\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + \",0\";\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = this.start1 + 1 + \",\" + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + \",0\";\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = this.start2 + 1 + \",\" + this.length2;\n  }\n  var text = [\"@@ -\" + coords1 + \" +\" + coords2 + \" @@\\n\"];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + \"\\n\";\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n};\n\nexport default diff_match_patch;\n","import DiffMatchPatch from \"./diff_match_patch\";\n\nconst dmp = new DiffMatchPatch();\n\nexport default (current, next) => {\n  const patch = dmp.patch_make(current, next);\n  const textPatch = dmp.patch_toText(patch);\n\n  return textPatch;\n};\n","/**\n * Returns simple hash for given string.\n * @see https://github.com/darkskyapp/string-hash/blob/master/index.js\n * @param string String to calculate hash of.\n */\nconst calculate = string => {\n  let hash = 5381;\n  let index = string.length;\n\n  while (index) {\n    hash = (hash * 33) ^ string.charCodeAt(--index);\n  }\n\n  return hash >>> 0;\n};\n\nexport { calculate };\n","let eventOptions = false;\ntry {\n  let opts = Object.defineProperty({}, \"passive\", {\n    get: function() {\n      eventOptions = { passive: true };\n    },\n  });\n  window.addEventListener(\"testPassive\", null, opts);\n  window.removeEventListener(\"testPassive\", null, opts);\n} catch (e) {}\n\nexport default (element, name, callback) =>\n  element.addEventListener(name, callback, eventOptions);\n","const construct = element => {\n  let selector = \"\";\n\n  const name = element[\"name\"];\n  if (name) {\n    selector += '[name=\"' + name + '\"]';\n\n    return selector;\n  }\n\n  if (element.id) {\n    selector += \"#\" + element.id;\n\n    return selector;\n  }\n\n  if (element.className) {\n    selector += \".\" + element.className.split(\" \").join(\".\");\n  }\n\n  const form = element[\"form\"];\n  if (form && form.id) {\n    selector = \"#\" + form.id + \" \" + selector;\n  }\n\n  return selector;\n};\n\nexport { construct };\n","import anonymize from \"../../common/anonymize\";\nimport computePatch from \"../computePatch\";\nimport { calculate as calculateHash } from \"../../common/hash\";\n\nexport default (source, callback) => {\n  let hash = calculateHash(\"\");\n  let previousHTML = \"\";\n  const config = {\n    attributes: true,\n    childList: true,\n    subtree: true,\n    characterData: true,\n  };\n\n  const mutationCallback = () => {\n    const newHTML = source.innerHTML\n      .replace(\n        /value=\"([^\"]+)\"/gm,\n        (match, value) => `value=\"${anonymize(value)}\"`\n      )\n      .replace(\n        /value='([^']+)'/gm,\n        (match, value) => `value='${anonymize(value)}'`\n      );\n    const patch = computePatch(previousHTML, newHTML);\n\n    callback({ patch, hash });\n\n    previousHTML = newHTML;\n    hash = calculateHash(newHTML);\n  };\n  mutationCallback();\n\n  const observer = new MutationObserver(mutationCallback);\n  observer.observe(source, config);\n};\n","import passiveListener from \"../../common/passiveListener\";\nimport { construct as constructSelector } from \"../../common/selector\";\n\nexport default (element, callback) => {\n  passiveListener(element, \"focusin\", event => {\n    const target = event.target;\n    const parent = target.parentNode;\n    const selector = constructSelector(target);\n\n    callback({\n      event: {\n        type: \"focusin\",\n        selector,\n        index: Array.prototype.indexOf.call(parent.children, target),\n      },\n    });\n  });\n};\n","import passiveListener from \"../../common/passiveListener\";\nimport { construct as constructSelector } from \"../../common/selector\";\nimport anonymize from \"../../common/anonymize\";\n\nexport default (element, callback) => {\n  passiveListener(element, \"change\", event => {\n    const target = event.target;\n    if (Number.isInteger(target.selectedIndex)) {\n      return;\n    }\n    const parent = target.parentNode;\n    const selector = constructSelector(target);\n\n    callback({\n      event: {\n        type: \"change\",\n        selector,\n        index: Array.prototype.indexOf.call(parent.children, target),\n        value: anonymize(target.value),\n      },\n    });\n  });\n};\n","import passiveListener from \"../../common/passiveListener\";\nimport { construct as constructSelector } from \"../../common/selector\";\nexport default (element, callback) => {\n  passiveListener(element, \"change\", event => {\n    const target = event.target;\n    const index = target.selectedIndex;\n    if (!Number.isInteger(index)) {\n      return;\n    }\n    const selector = constructSelector(target);\n\n    callback({\n      event: {\n        type: \"select\",\n        selector,\n        index,\n      },\n    });\n  });\n};\n","import passiveListener from \"../../common/passiveListener\";\n\nexport default (element, callback) => {\n  let scrollPosition = { x: 0, y: 0 };\n  let isScheduled = false;\n\n  passiveListener(window, \"scroll\", () => {\n    scrollPosition.x = window.pageXOffset;\n    scrollPosition.y = window.pageYOffset;\n\n    if (!isScheduled) {\n      setTimeout(() => {\n        callback({\n          event: {\n            type: \"scroll\",\n            x: scrollPosition.x,\n            y: scrollPosition.y,\n          },\n        });\n        isScheduled = false;\n      }, 100);\n\n      isScheduled = true;\n    }\n  });\n};\n","import passiveListener from \"../../common/passiveListener\";\n\nexport default (element, callback) => {\n  let isScheduled = false;\n  const mousePosition = { x: 0, y: 0 };\n\n  passiveListener(element, \"mousemove\", event => {\n    mousePosition.x = event.clientX;\n    mousePosition.y = event.clientY;\n\n    if (!isScheduled) {\n      setTimeout(() => {\n        isScheduled = false;\n\n        callback({\n          event: {\n            type: \"mousemove\",\n            x: mousePosition.x,\n            y: mousePosition.y,\n          },\n        });\n      }, 100);\n      isScheduled = true;\n    }\n  });\n};\n","import passiveListener from \"../../common/passiveListener\";\n\nexport default (element, callback) => {\n  let windowDimensions = { w: 0, h: 0 };\n  let isScheduled = false;\n\n  passiveListener(window, \"resize\", () => {\n    windowDimensions.w = window.innerWidth;\n    windowDimensions.h = window.innerHeight;\n\n    if (!isScheduled) {\n      setTimeout(() => {\n        const rectObject = element.getBoundingClientRect();\n        callback({\n          event: {\n            type: \"resize\",\n            w: rectObject.width,\n            h: rectObject.height,\n          },\n        });\n        isScheduled = false;\n      }, 100);\n\n      isScheduled = true;\n    }\n  });\n};\n","import * as observer from \"./observer\";\n\nconst send = (snapshot, socket) => {\n  console.log({ snapshot });\n  socket.send(JSON.stringify(snapshot));\n};\n\nconst observe = source => {\n  // Create WebSocket connection.\n  const socket = new WebSocket(\"ws://localhost:8080\");\n\n  // Connection opened\n  socket.addEventListener(\"open\", function() {\n    const callback = snapshot => {\n      snapshot.time = Date.now();\n      send(snapshot, socket);\n    };\n\n    Object.keys(observer).forEach(name => {\n      observer[name](source, callback);\n    });\n  });\n};\n\nexport { observe };\n"],"names":["value","replace","diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","Diff","op","text","prototype","length","toString","this","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_b","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","linearray","lineArray","chars1","chars2","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","text1_a","text2_a","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_text1","patch_addContext_","patch","start2","length1","padding","lastIndexOf","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_toText","encodeURI","const","DiffMatchPatch","calculate","string","hash","index","eventOptions","opts","Object","defineProperty","get","passive","window","addEventListener","removeEventListener","e","element","name","callback","construct","selector","id","className","split","form","source","calculateHash","previousHTML","mutationCallback","newHTML","innerHTML","anonymize","current","next","computePatch","MutationObserver","observe","attributes","childList","subtree","characterData","passiveListener","event","target","parent","parentNode","constructSelector","type","call","children","isInteger","selectedIndex","scrollPosition","isScheduled","pageXOffset","pageYOffset","setTimeout","mousePosition","clientX","clientY","rectObject","getBoundingClientRect","w","width","h","height","socket","WebSocket","snapshot","time","now","console","log","send","JSON","stringify","keys","observer","forEach"],"mappings":"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"}
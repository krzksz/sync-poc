{"version":3,"file":"reciever.umd.js","sources":["../src/reciever/diff_match_patch.js","../src/reciever/applyPatch.js","../src/reciever/reciever.js"],"sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n//  DIFF FUNCTIONS\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * Attempts to look like a two-element array (which is what this used to be).\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  this[0] = op;\n  this[1] = text;\n};\n\ndiff_match_patch.Diff.prototype.length = 2;\n\n/**\n * Emulate the output of a two-element array.\n * @return {string} Diff operation as a string.\n */\ndiff_match_patch.Diff.prototype.toString = function() {\n  return this[0] + \",\" + this[1];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(\n  text1,\n  text2,\n  opt_checklines,\n  opt_deadline\n) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == \"undefined\") {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error(\"Null input. (diff_main)\");\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == \"undefined\") {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(\n  text1,\n  text2,\n  checklines,\n  deadline\n) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [\n      new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n      new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n      new diff_match_patch.Diff(\n        DIFF_INSERT,\n        longtext.substring(i + shorttext.length)\n      ),\n    ];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [\n      new diff_match_patch.Diff(DIFF_DELETE, text1),\n      new diff_match_patch.Diff(DIFF_INSERT, text2),\n    ];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat(\n      [new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n      diffs_b\n    );\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, \"\"));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = \"\";\n  var text_insert = \"\";\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(\n            pointer - count_delete - count_insert,\n            count_delete + count_insert\n          );\n          pointer = pointer - count_delete - count_insert;\n          var subDiff = this.diff_main(\n            text_delete,\n            text_insert,\n            false,\n            deadline\n          );\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = \"\";\n        text_insert = \"\";\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop(); // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = delta % 2 != 0;\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if (new Date().getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (\n        x1 < text1_length &&\n        y1 < text2_length &&\n        text1.charAt(x1) == text2.charAt(y1)\n      ) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (\n        x2 < text1_length &&\n        y2 < text2_length &&\n        text1.charAt(text1_length - x2 - 1) ==\n          text2.charAt(text2_length - y2 - 1)\n      ) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [\n    new diff_match_patch.Diff(DIFF_DELETE, text1),\n    new diff_match_patch.Diff(DIFF_INSERT, text2),\n  ];\n};\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(\n  text1,\n  text2,\n  x,\n  y,\n  deadline\n) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = []; // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {}; // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = \"\";\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = \"\";\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf(\"\\n\", lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (\n        lineHash.hasOwnProperty\n          ? lineHash.hasOwnProperty(line)\n          : lineHash[line] !== undefined\n      ) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return { chars1: chars1, chars2: chars2, lineArray: lineArray };\n};\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join(\"\");\n  }\n};\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(pointerstart, pointermid) ==\n      text2.substring(pointerstart, pointermid)\n    ) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (\n    !text1 ||\n    !text2 ||\n    text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)\n  ) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (\n      text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n      text2.substring(text2.length - pointermid, text2.length - pointerend)\n    ) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (\n      found == 0 ||\n      text1.substring(text_length - length) == text2.substring(0, length)\n    ) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = \"\";\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(\n        longtext.substring(i),\n        shorttext.substring(j)\n      );\n      var suffixLength = dmp.diff_commonSuffix(\n        longtext.substring(0, i),\n        shorttext.substring(0, j)\n      );\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common =\n          shorttext.substring(j - suffixLength, j) +\n          shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [\n        best_longtext_a,\n        best_longtext_b,\n        best_shorttext_a,\n        best_shorttext_b,\n        best_common,\n      ];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(\n    longtext,\n    shorttext,\n    Math.ceil(longtext.length / 4)\n  );\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(\n    longtext,\n    shorttext,\n    Math.ceil(longtext.length / 2)\n  );\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (\n        lastEquality &&\n        lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1) &&\n        lastEquality.length <= Math.max(length_insertions2, length_deletions2)\n      ) {\n        // Duplicate record.\n        diffs.splice(\n          equalities[equalitiesLength - 1],\n          0,\n          new diff_match_patch.Diff(DIFF_DELETE, lastEquality)\n        );\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (\n      diffs[pointer - 1][0] == DIFF_DELETE &&\n      diffs[pointer][0] == DIFF_INSERT\n    ) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (\n          overlap_length1 >= deletion.length / 2 ||\n          overlap_length1 >= insertion.length / 2\n        ) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(\n            pointer,\n            0,\n            new diff_match_patch.Diff(\n              DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)\n            )\n          );\n          diffs[pointer - 1][1] = deletion.substring(\n            0,\n            deletion.length - overlap_length1\n          );\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (\n          overlap_length2 >= deletion.length / 2 ||\n          overlap_length2 >= insertion.length / 2\n        ) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(\n            pointer,\n            0,\n            new diff_match_patch.Diff(\n              DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)\n            )\n          );\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(\n            0,\n            insertion.length - overlap_length2\n          );\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 =\n      nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 =\n      nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 =\n      whitespace1 && char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 =\n      whitespace2 && char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 =\n      lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 =\n      lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (\n      diffs[pointer - 1][0] == DIFF_EQUAL &&\n      diffs[pointer + 1][0] == DIFF_EQUAL\n    ) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore =\n        diff_cleanupSemanticScore_(equality1, edit) +\n        diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score =\n          diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, \"\"));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = \"\";\n  var text_insert = \"\";\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if (\n                pointer - count_delete - count_insert > 0 &&\n                diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL\n              ) {\n                diffs[\n                  pointer - count_delete - count_insert - 1\n                ][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(\n                  0,\n                  0,\n                  new diff_match_patch.Diff(\n                    DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)\n                  )\n                );\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] =\n                text_insert.substring(text_insert.length - commonlength) +\n                diffs[pointer][1];\n              text_insert = text_insert.substring(\n                0,\n                text_insert.length - commonlength\n              );\n              text_delete = text_delete.substring(\n                0,\n                text_delete.length - commonlength\n              );\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(\n              pointer,\n              0,\n              new diff_match_patch.Diff(DIFF_DELETE, text_delete)\n            );\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(\n              pointer,\n              0,\n              new diff_match_patch.Diff(DIFF_INSERT, text_insert)\n            );\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = \"\";\n        text_insert = \"\";\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === \"\") {\n    diffs.pop(); // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (\n      diffs[pointer - 1][0] == DIFF_EQUAL &&\n      diffs[pointer + 1][0] == DIFF_EQUAL\n    ) {\n      // This is a single edit surrounded by equalities.\n      if (\n        diffs[pointer][1].substring(\n          diffs[pointer][1].length - diffs[pointer - 1][1].length\n        ) == diffs[pointer - 1][1]\n      ) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] =\n          diffs[pointer - 1][1] +\n          diffs[pointer][1].substring(\n            0,\n            diffs[pointer][1].length - diffs[pointer - 1][1].length\n          );\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (\n        diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n        diffs[pointer + 1][1]\n      ) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n          diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n          diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {\n      // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {\n      // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n};\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join(\"\");\n};\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0; // Keeping our own length var is faster in JS.\n  var pointer = 0; // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case \"+\":\n        try {\n          diffs[diffsLength++] = new diff_match_patch.Diff(\n            DIFF_INSERT,\n            decodeURI(param)\n          );\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error(\"Illegal escape in diff_fromDelta: \" + param);\n        }\n        break;\n      case \"-\":\n      // Fall through.\n      case \"=\":\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error(\"Invalid number in diff_fromDelta: \" + param);\n        }\n        var text = text1.substring(pointer, (pointer += n));\n        if (tokens[x].charAt(0) == \"=\") {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error(\n            \"Invalid diff operation in diff_fromDelta: \" + tokens[x]\n          );\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error(\n      \"Delta length (\" +\n        pointer +\n        \") does not equal source text length (\" +\n        text1.length +\n        \").\"\n    );\n  }\n  return diffs;\n};\n\n//  MATCH FUNCTIONS\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error(\"Null input. (match_main)\");\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error(\"Pattern too long for this browser.\");\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + proximity / dmp.Match_Distance;\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold = Math.min(\n        match_bitapScore_(0, best_loc),\n        score_threshold\n      );\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {\n        // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {\n        // Subsequent passes: fuzzy match.\n        rd[j] =\n          (((rd[j + 1] << 1) | 1) & charMatch) |\n          (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n          last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n//  PATCH FUNCTIONS\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = new diff_match_patch.Diff(\n        patch.diffs[y][0],\n        patch.diffs[y][1]\n      );\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(\n        text,\n        text1.substring(0, this.Match_MaxBits),\n        expected_loc\n      );\n      if (start_loc != -1) {\n        end_loc = this.match_main(\n          text,\n          text1.substring(text1.length - this.Match_MaxBits),\n          expected_loc + text1.length - this.Match_MaxBits\n        );\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text =\n          text.substring(0, start_loc) +\n          this.diff_text2(patches[x].diffs) +\n          text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (\n          text1.length > this.Match_MaxBits &&\n          this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold\n        ) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {\n              // Insertion\n              text =\n                text.substring(0, start_loc + index2) +\n                mod[1] +\n                text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              // Deletion\n              text =\n                text.substring(0, start_loc + index2) +\n                text.substring(\n                  start_loc + this.diff_xIndex(diffs, index1 + mod[1].length)\n                );\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = \"\";\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength; // Should be 0.\n    patch.start2 -= paddingLength; // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = \"\";\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== \"\") {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (\n        bigpatch.diffs.length !== 0 &&\n        patch.length1 < patch_size - this.Patch_Margin\n      ) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (\n          diff_type === DIFF_DELETE &&\n          patch.diffs.length == 1 &&\n          patch.diffs[0][0] == DIFF_EQUAL &&\n          diff_text.length > 2 * patch_size\n        ) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(\n            0,\n            patch_size - patch.length1 - this.Patch_Margin\n          );\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(\n              diff_text.length\n            );\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext = precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs).substring(\n        0,\n        this.Patch_Margin\n      );\n      if (postcontext !== \"\") {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (\n          patch.diffs.length !== 0 &&\n          patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL\n        ) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split(\"\\n\");\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error(\"Invalid patch string: \" + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === \"\") {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == \"0\") {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === \"\") {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == \"0\") {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error(\"Illegal escape in patch_fromText: \" + line);\n      }\n      if (sign == \"-\") {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == \"+\") {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == \" \") {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == \"@\") {\n        // Start of next patch.\n        break;\n      } else if (sign === \"\") {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + \",0\";\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = this.start1 + 1 + \",\" + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + \",0\";\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = this.start2 + 1 + \",\" + this.length2;\n  }\n  var text = [\"@@ -\" + coords1 + \" +\" + coords2 + \" @@\\n\"];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = \"+\";\n        break;\n      case DIFF_DELETE:\n        op = \"-\";\n        break;\n      case DIFF_EQUAL:\n        op = \" \";\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + \"\\n\";\n  }\n  return text.join(\"\").replace(/%20/g, \" \");\n};\n\nexport default diff_match_patch;\n","import DiffMatchPatch from \"./diff_match_patch.js\";\n\nconst dmp = new DiffMatchPatch();\n\nexport default (patch, text) => {\n  const parsedPatch = dmp.patch_fromText(patch);\n\n  return dmp.patch_apply(parsedPatch, text)[0];\n};\n","import applyPatch from \"./applyPatch\";\n\nconst cursor = document.querySelector(\"#cursor\");\n\nconst eventsHistory = {\n  focusin: null,\n  resize: null,\n  select: {},\n  change: {},\n};\n\nconst applyEvent = (event, target) => {\n  const index = event.index;\n  let element;\n\n  switch (event.type) {\n    case \"focusin\":\n      element = target.querySelector(\n        `${event.selector}:nth-child(${index + 1})`\n      );\n      if (!element) {\n        return;\n      }\n\n      element.focus();\n      eventsHistory.focusin = event;\n      break;\n    case \"change\":\n      element = target.querySelector(\n        `${event.selector}:nth-child(${index + 1})`\n      );\n      if (!element) {\n        return;\n      }\n\n      element.click();\n      element.value = event.value;\n      eventsHistory.change[event.selector] = event;\n      break;\n    case \"select\":\n      element = target.querySelector(event.selector);\n      if (!element) {\n        return;\n      }\n\n      element.selectedIndex = index;\n      element.value = element.querySelector(`:nth-child(${index + 1})`).value;\n      eventsHistory.select[event.selector] = event;\n      break;\n    case \"mousemove\":\n      cursor.style.transform = `translate3d(${event.x}px, ${event.y}px, 0)`;\n      break;\n    case \"scroll\":\n      window.scroll({\n        behavior: \"smooth\",\n        top: event.y,\n        left: event.x,\n      });\n      break;\n\n    case \"resize\":\n      target.style.width = event.w + \"px\";\n      target.style.height = event.h + \"px\";\n      eventsHistory.resize = event;\n      break;\n  }\n};\n\nconst redoEvents = (events, target) => {\n  if (events.focusin) {\n    applyEvent(events.focusin, target);\n  }\n\n  if (events.resize) {\n    applyEvent(events.resize, target);\n  }\n\n  Object.values(eventsHistory.change).forEach(event => {\n    applyEvent(event, target);\n  });\n\n  Object.values(eventsHistory.select).forEach(event => {\n    applyEvent(event, target);\n  });\n};\n\nconst listen = target => {\n  // Create WebSocket connection.\n  const socket = new WebSocket(\"ws://localhost:8080\");\n\n  // Listen for messages\n  socket.addEventListener(\"message\", event => {\n    const snapshot = JSON.parse(event.data);\n    console.log({ snapshot });\n\n    if (snapshot.html) {\n      target.innerHTML = snapshot.html;\n      redoEvents(eventsHistory, target);\n    }\n\n    if (snapshot.patch) {\n      target.innerHTML = applyPatch(snapshot.patch, target.innerHTML);\n      redoEvents(eventsHistory, target);\n    }\n\n    if (snapshot.event) {\n      applyEvent(snapshot.event, target);\n    }\n  });\n};\n\nexport { listen };\n"],"names":["diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","Diff","op","text","prototype","length","toString","this","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_b","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","linearray","lineArray","chars1","chars2","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","y1","x1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","seed","best_common","prefixLength","suffixLength","text1_a","text2_a","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_xIndex","loc","last_chars1","last_chars2","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","data","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","bin_min","bin_mid","matchmask","last_rd","bin_max","start","finish","rd","charMatch","patch_deepCopy","patches","patchesCopy","patch","patchCopy","patch_obj","start1","start2","length1","length2","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","start_loc","expected_loc","end_loc","index2","index1","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","diff_type","diff_text","shift","postcontext","patch_fromText","textline","textPointer","patchHeader","m","sign","encodeURI","replace","const","DiffMatchPatch","cursor","document","querySelector","eventsHistory","focusin","resize","select","change","applyEvent","event","target","element","index","type","focus","click","value","selector","selectedIndex","style","transform","window","scroll","behavior","top","left","width","w","height","h","redoEvents","events","Object","values","forEach","WebSocket","addEventListener","parsedPatch","snapshot","JSON","parse","console","log","html","innerHTML"],"mappings":"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"}